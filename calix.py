#!/usr/bin/env python
# -*- coding: UTF8 -*-

# Python module calix.py
# Autogenerated from calix.glade
# Generated on Thu Jul 14 19:39:18 2005

# Warning: Do not delete or modify comments related to context
# They are required to keep user's code

app_name = "calix"
app_version = "0.0.1"

glade_dir = ""
locale_dir = ""

from SimpleGladeApp import SimpleGladeApp
from SimpleGladeApp import bindtextdomain
import os
import gtk

bindtextdomain(app_name, locale_dir)

class Window(SimpleGladeApp):
	def __init__(self, path="calix.glade", root="window", domain=app_name, **kwargs):
		path = os.path.join(glade_dir, path)
		SimpleGladeApp.__init__(self, path, root, domain, **kwargs)
		self.red,self.green,self.blue = self.get_current_gamma()
		self.ored = self.red
		self.ogreen = self.green
		self.oblue = self.blue
		self.set_gamma(1.0,1.0,1.0)
		self.button_back.hide()
		self.button_next.show()
		self.button_done.hide()
		

	#context Window.new {
	def new(self):
		pass
	#context Window.new }

	#context Window custom methods {
	#--- Write your own methods here ---#
	def update_grey(self):
		self.hscale_grey.set_value((self.red+self.green+self.blue)/3)
	
	def update_color(self):
		self.hscale_red.set_value(self.red)
		self.hscale_green.set_value(self.green)
		self.hscale_blue.set_value(self.blue)
	
	def update_label(self):
		self.label_final.set_label('Gamma %s %s %s' % (self.red,self.green,self.blue))
	
	def set_gamma(self, r,g,b):
		os.system('xgamma -rgamma %s -ggamma %s -bgamma %s' % (r,g,b))

	def get_current_gamma(self):
		w,r = os.popen4('xgamma')
		l = r.readline()
		r,g,b=l[8:13],l[22:27],l[34:40]
		return float(r),float(g),float(b)
		
	def set_grey(self, grey):
		ogrey = (self.red + self.green + self.blue) / 3
		change = grey/ogrey
		self.red = self.red * change
		self.green = self.green * change
		self.blue = self.blue * change
		self.set_gamma(self.red,self.green,self.blue)

	#context Window custom methods }

	#context Window.on_window_delete_event {
	def on_window_delete_event(self, widget, *args):
		self.set_gamma(self.ored,self.ogreen,self.oblue)
		gtk.main_quit()
	#context Window.on_window_delete_event }

	#context Window.on_notebook_switch_page {
	def on_notebook_switch_page(self, widget, pointer,page):		
		if page == 0:
			self.button_back.hide()
			self.button_next.show()
			self.button_done.hide()
		elif page == 1:
			self.button_back.show()
			self.button_next.show()
			self.button_done.hide()
			self.update_grey()
		elif page == 2:
			self.button_back.show()
			self.button_next.show()
			self.button_done.hide()
			self.update_color()
		elif page == 3:
			self.button_back.show()
			self.button_next.hide()
			self.button_done.show()
			self.update_label()

	#context Window.on_notebook_switch_page }

	#context Window.on_hscale_grey_value_changed {
	def on_hscale_grey_value_changed(self, widget, *args):
		self.set_grey(widget.get_value())
	#context Window.on_hscale_grey_value_changed }

	#context Window.on_hscale_green_value_changed {
	def on_hscale_green_value_changed(self, widget, *args):
		self.green = widget.get_value()
		self.set_gamma(self.red,self.green,self.blue)
	#context Window.on_hscale_green_value_changed }

	#context Window.on_hscale_blue_value_changed {
	def on_hscale_blue_value_changed(self, widget, *args):
		self.blue = widget.get_value()
		self.set_gamma(self.red,self.green,self.blue)
	#context Window.on_hscale_blue_value_changed }

	#context Window.on_hscale_red_value_changed {
	def on_hscale_red_value_changed(self, widget, *args):
		self.red = widget.get_value()
		self.set_gamma(self.red,self.green,self.blue)
	#context Window.on_hscale_red_value_changed }

	#context Window.on_button_done_clicked {
	def on_button_done_clicked(self, widget, *args):
		gtk.main_quit()
	#context Window.on_button_done_clicked }

	#context Window.on_button_next_clicked {
	def on_button_next_clicked(self, widget, *args):
		page = self.notebook.get_current_page()
		if page < 3:
			page = page + 1
			self.notebook.set_current_page(page)
	#context Window.on_button_next_clicked }

	#context Window.on_button_back_clicked {
	def on_button_back_clicked(self, widget, *args):
		page = self.notebook.get_current_page()
		if page > 0:
			page = page - 1
			self.notebook.set_current_page(page)
	#context Window.on_button_back_clicked }

	#context Window.on_button_cancel_clicked {
	def on_button_cancel_clicked(self, widget, *args):
		self.set_gamma(self.ored,self.ogreen,self.oblue)
		gtk.main_quit()
	#context Window.on_button_cancel_clicked }

	#context Window.on_button_reset_clicked {
	def on_button_reset_clicked(self, widget, *args):
		self.red = self.ored
		self.green = self.ogreen
		self.blue = self.oblue
		self.update_grey()
		self.update_color()
		self.update_label()
	#context Window.on_button_reset_clicked }

#context main {

def main():
	window = Window()

	# SimpleGladeApp.run() must be called just once per program
	window.run()

if __name__ == "__main__":
	main()

#context main }
